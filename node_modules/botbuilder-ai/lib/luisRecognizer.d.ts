import { RecognizerResult, TurnContext } from 'botbuilder';
/**
 * Description of a LUIS application used for initializing a LuisRecognizer.
 */
export interface LuisApplication {
    /**
     * Your models application Id from LUIS
     */
    applicationId: string;
    /**
     *  (Optional) LUIS endpoint with a default of https://westus.api.cognitive.microsoft.com
     */
    endpoint?: string;
    /**
     * Endpoint key for talking to LUIS
     */
    endpointKey: string;
}
/**
 * Options per LUIS prediction.
 */
export interface LuisPredictionOptions {
    /**
     * (Optional) Bing Spell Check subscription key.
     */
    bingSpellCheckSubscriptionKey?: string;
    /**
     * (Optional) Determine if all intents come back or only the top one.
     */
    includeAllIntents?: boolean;
    /**
     * (Optional) A value indicating whether or not instance data should be included in response.
     */
    includeInstanceData?: boolean;
    /**
     * (Optional) If queries should be logged in LUIS.
     */
    log?: boolean;
    /**
     * (Optional) Whether to spell check query.
     */
    spellCheck?: boolean;
    /**
     * (Optional) Whether to use the staging endpoint.
     */
    staging?: boolean;
    /**
     * (Optional) The time zone offset for resolving datetimes.
     */
    timezoneOffset?: number;
}
/**
 * Component used to recognize intents in a user utterance using a configured LUIS model.
 *
 * @remarks
 * This component can be used within your bots logic by calling [recognize()](#recognize).
 */
export declare class LuisRecognizer {
    private application;
    private options;
    private includeApiResults;
    private luisClient;
    private cacheKey;
    /**
     * Creates a new LuisRecognizer instance.
     * @param application LUIS application to use.
     * @param options Options used to control predictions.
     */
    constructor(application: LuisApplication, options?: LuisPredictionOptions, includeApiResults?: boolean);
    /**
     * Returns the name of the top scoring intent from a set of LUIS results.
     * @param results Result set to be searched.
     * @param defaultIntent (Optional) intent name to return should a top intent be found. Defaults to a value of `None`.
     * @param minScore (Optional) minimum score needed for an intent to be considered as a top intent. If all intents in the set are below this threshold then the `defaultIntent` will be returned.  Defaults to a value of `0.0`.
     */
    static topIntent(results: RecognizerResult | undefined, defaultIntent?: string, minScore?: number): string;
    /**
     * Calls LUIS to recognize intents and entities in a users utterance.
     *
     * @remarks
     * In addition to returning the results from LUIS, [recognize()](#recognize) will also
     * emit a trace activity that contains the LUIS results.
     * @param context Context for the current turn of conversation with the use.
     */
    recognize(context: TurnContext): Promise<RecognizerResult>;
    private emitTraceInfo(context, luisResult, recognizerResult);
    private prepareErrorMessage(error);
    private normalizeName(name);
    private getIntents(luisResult);
    private getEntitiesAndMetadata(entities, compositeEntities, verbose);
    private getEntityValue(entity);
    private getEntityMetadata(entity);
    private getNormalizedEntityName(entity);
    private populateCompositeEntity(compositeEntity, entities, entitiesAndMetadata, verbose);
    /**
     * If a property doesn't exist add it to a new array, otherwise append it to the existing array
     * @param obj Object on which the property is to be set
     * @param key Property Key
     * @param value Property Value
     */
    private addProperty(obj, key, value);
    private getSentiment(luis);
}
